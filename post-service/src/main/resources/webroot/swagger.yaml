openapi: 3.0.0
info:
  version: 1.0.0
  title: Post service
servers:
  - url: http://api.depa.io/
paths:
  /static/*:
    get:
      operationId: getStatic
      responses:
        200:
          description: static
        default:
          description: unexpected error
  /test:
    post:
      security:
        - bearerAuth: []
      operationId: test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /comment/{commentId}:
    delete:
      security:
        - bearerAuth: []
      operationId: deleteCommentById
      parameters:
        - in: path
          name: commentId
          required: true
          description: Comment id
          schema:
            type: integer
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /comment/{commentId}/vote/{value}:
    post:
      security:
        - bearerAuth: []
      operationId: createCommentVoteByCommentId
      parameters:
        - in: path
          name: commentId
          required: true
          description: Comment id
          schema:
            type: integer
        - in: path
          name: value
          required: true
          description: Vote value
          schema:
            type: boolean
      responses:
        200:
          description: Vote
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /comment/list/{size}:
    get:
      operationId: getCommentList
      parameters:
        - in: path
          name: size
          required: true
          schema:
            type: integer
      responses:
        200:
          description: List
        default:
          description: unexpected error
  /comment/vote/{voteId}:
    delete:
      security:
        - bearerAuth: []
      operationId: deleteCommentVoteById
      parameters:
        - in: path
          name: voteId
          required: true
          description: Comment id
          schema:
            type: integer
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
    put:
      security:
        - bearerAuth: []
      operationId: updateCommentVoteById
      parameters:
        - in: path
          name: voteId
          required: true
          description: Vote id
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  type: boolean
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /{postId}:
    delete:
      security:
        - bearerAuth: []
      operationId: deleteById
      parameters:
        - in: path
          name: postId
          required: true
          description: Post id
          schema:
            type: integer
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
    put:
      security:
        - bearerAuth: []
      operationId: updateById
      parameters:
        - in: path
          name: postId
          required: true
          description: Post id
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  minLength: 80
                imageUrl:
                  type: string
                  minLength: 4
                  nullable: true
                title:
                  type: string
                  minLength: 4
                tags:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 8
                  nullable: true
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /{postId}/comment:
    post:
      security:
        - bearerAuth: []
      operationId: createCommentByPostId
      parameters:
        - in: path
          name: postId
          required: true
          description: Post id
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 4
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /{postId}/comment/page/{number}/{size}:
    get:
      operationId: getCommentPageByPostId
      parameters:
        - in: path
          name: postId
          required: true
          description: Post id
          schema:
            type: integer
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /{uri}:
    get:
      operationId: getByUri
      parameters:
        - name: uri
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Post
        default:
          description: unexpected error
  /{uri}/tracking:
    get:
      security:
        - bearerAuth: []
      operationId: getByUriWithTracking
      parameters:
        - name: uri
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Post
        default:
          description: unexpected error
  /bookmark:
    delete:
      security:
        - bearerAuth: []
      operationId: deleteBookmark
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /bookmark/{bookmarkId}:
    delete:
      security:
        - bearerAuth: []
      operationId: deleteBookmarkById
      parameters:
        - in: path
          name: bookmarkId
          required: true
          description: Bookmark id
          schema:
            type: integer
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /bookmark/{postId}:
    post:
      security:
        - bearerAuth: []
      operationId: createBookmark
      parameters:
        - in: path
          name: postId
          required: true
          description: Post id
          schema:
            type: integer
      responses:
        200:
          description: Bookmark
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /bookmark/list/{size}:
    get:
      security:
        - bearerAuth: []
      operationId: getBookmarkList
      parameters:
        - in: path
          name: size
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /category/{categoryId}:
    post:
      security:
        - bearerAuth: []
      operationId: createByCategoryId
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - imageUrl
                - title
                - tags
              properties:
                content:
                  type: string
                  minLength: 80
                imageUrl:
                  type: string
                  minLength: 4
                  nullable: true
                title:
                  type: string
                  minLength: 4
                tags:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 8
                  nullable: true
      responses:
        200:
          description: Post
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /clap/{postId}/{value}:
    put:
      security:
        - bearerAuth: []
      operationId: updateClapByPostId
      parameters:
        - in: path
          name: postId
          required: true
          description: Post id
          schema:
            type: integer
        - in: path
          name: value
          required: true
          description: Clap value
          schema:
            type: integer
            minimum: 1
            maximum: 40
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /neighbours/{postId}:
    get:
      operationId: getNeighboursById
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Neighbours
        default:
          description: unexpected error
  /page/{number}/{size}/bookmark/{value}:
    get:
      security:
        - bearerAuth: []
      operationId: getPageByBookmark
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: value
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /page/{number}/{size}/category/{categoryId}:
    get:
      operationId: getPageByCategoryId
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /page/{number}/{size}/category/{categoryId}/targeting:
    get:
      security:
        - bearerAuth: []
      operationId: getPageByCategoryIdAndTargeting
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /page/{number}/{size}/category/{categoryId}/tag/{tagId}:
    get:
      operationId: getPageByCategoryIdAndTagId
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
        - in: path
          name: tagId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /page/{number}/{size}/match/{searchKey}:
    get:
      operationId: getPageByMatch
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: searchKey
          required: true
          schema:
            type: string
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /page/{number}/{size}/pending/{value}:
    get:
      operationId: getPageByPending
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: value
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /page/{number}/{size}/tag/{tagId}:
    get:
      operationId: getPageByTagId
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: tagId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /page/{number}/{size}/user/{userId}:
    get:
      operationId: getPageByUserId
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Page
        default:
          description: unexpected error
  /pending/{postId}/{value}:
    put:
      security:
        - bearerAuth: []
      operationId: updatePendingById
      parameters:
        - in: path
          name: postId
          required: true
          description: Post id
          schema:
            type: integer
        - in: path
          name: value
          required: true
          description: Pending value
          schema:
            type: boolean
      responses:
        200:
          description: Status
        401:
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
  /tag/{tagId}:
    get:
      operationId: getTagById
      parameters:
        - in: path
          name: tagId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Tag
        default:
          description: unexpected error
  /tag/page/{number}/{size}/match/{searchKey}:
    get:
      operationId: getTagPageByMatch
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
        - in: path
          name: size
          required: true
          schema:
            type: integer
        - in: path
          name: searchKey
          required: true
          schema:
            type: string
      responses:
        200:
          description: Page
        default:
          description: unexpected error
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT